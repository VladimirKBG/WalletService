from decimal import Decimal, ROUND_HALF_UP
from uuid import UUID
from datetime import datetime

from pydantic import BaseModel, Field, field_validator


class WalletBase(BaseModel):
    model_config = {
        "from_attributes": True,
        "arbitrary_types_allowed": True,
    }


class WalletRead(WalletBase):
    id: UUID = Field(
        ...,
        description=f"Unique identifier of wallet (autogenerated).",
        example="9f13d9c0-7db0-4a46-bdf0-148f9a2a5d22",
    )

    created_at: datetime = Field(
        ...,
        description=f"Date and time of creation of wallet (automatically set while DB record creating).",
        example="2025-09-26T17:37:15.123456+03:00",
    )

    updated_at: datetime = Field(
        ...,
        description=f"Date and time of last wallet's state changing (automatically set while DB record creating).",
        example="2025-09-26T17:37:15.123456+03:00",
    )

    balance: Decimal = Field(
        ...,
        description="Balance of wallet.",
        example="100.00"
    )


class WalletCreate(WalletBase):
    id: UUID = Field(
        ...,
        description=f"Unique identifier of wallet (autogenerated).",
        example="9f13d9c0-7db0-4a46-bdf0-148f9a2a5d22",
    )

    balance: Decimal = Field(
        ...,
        description="Balance of wallet.",
        example="100.00"
    )

    @classmethod
    @field_validator("amount")
    def _quantize_amount(cls, v: Decimal) -> Decimal:
        return v.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
