from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime

from pydantic import BaseModel, Field, field_validator
from uuid import UUID

from app.models.enums import OperationType


class OperationBase(BaseModel):
    operation_type: OperationType = Field(
        ...,
        description=f"Type of operation: {OperationType}.",
        example="DEPOSIT",
    )
    amount: Decimal = Field(
        ...,
        gt=0,
        description=f"Positive decimal value of operation.",
        example="100.00",
    )

    model_config = {
        "from_attributes": True,
        "arbitrary_types_allowed": True,
    }


class OperationCreate(OperationBase):
    @classmethod
    @field_validator("amount")
    def _quantize_amount(cls, v: Decimal) -> Decimal:
        return v.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)


class OperationRead(OperationBase):
    id: UUID = Field(
        ...,
        description=f"Unique identifier of operation (autogenerated).",
        example="9f13d9c0-7db0-4a46-bdf0-148f9a2a5d22",
    )

    wallet_id: UUID = Field(
        ...,
        description=f"Unique identifier of wallet affected by this operation (autogenerated).",
        example="3c2f2b83-6c8c-4f02-9e5d-1977fd68a271",
    )

    created_at: datetime = Field(
        ...,
        description=f"Date and time of creation of operation (automatically set while DB record creating).",
        example="2025-09-26T17:37:15.123456+03:00",
    )
